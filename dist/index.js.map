{"version":3,"sources":["../src/index.js"],"names":["homedir","os","path","join","atma","init","server","successOrError","statusCode","log","error","success","responseTime","time","bold","lightError","morganMiddleware","tokens","req","res","method","status","url","date","cmdValue","program","version","description","usage","arguments","action","cmd","command","option","options","OPTS","port","spa","showHidden","hidden","APP_DIR","process","cwd","app","use","targetSite","targetPath","originalUrl","split","result","type","sendFile","send","listen","console","deployment","new_link","authFile","auth","JSON","parse","token","response","requestAccessToken","accessToken","data","request","post","form","link","target","headers","authorization","err","httpResponse","body","exit","parseBody","logout","argv","help"],"mappings":"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","file":"index.js","sourcesContent":["\n\nimport path from 'path'\nimport { existsSync, mkdirSync, readFileSync, unlinkSync } from 'fs'\n\nimport express from 'express'\nimport morgan from 'morgan'\nimport request from 'request'\n\nimport os from 'os'\nimport program from 'commander'\n\nimport sera from '@evius/sera'\nimport atma from '@evius/atma-client'\n\nimport log from './lib/log'\nimport deploy from './lib/deploy'\nimport login from './lib/login'\n\nconst homedir = os.homedir()\nif(!existsSync(path.join(homedir, '.serph'))) {\n\tmkdirSync(path.join(homedir, '.serph'))\n}\n\natma.init({\n\t// server: 'http://localhost:6969'\n\tserver: 'http://atma.serph.network'\n})\n\nconst successOrError = (statusCode) => {\n\tif(statusCode >= 400) {\n\t\treturn log.error(statusCode)\n\t}\n\treturn log.success(statusCode)\n}\n\nconst responseTime = (time) => {\n\tif(time < 3000) {\n\t\treturn log.bold(`${time} ms`)\n\t}\n\tif(time < 5000) {\n\t\treturn log.lightError(`${time} ms`)\n\t}\n\treturn log.lightError(`${time} ms`)\n}\n\nconst morganMiddleware = morgan(function (tokens, req, res) {\n\treturn [\n\t\tlog.bold(`--> ${tokens.method(req, res)}`),\n\t\tsuccessOrError(tokens.status(req, res)),\n\t\tlog.url(tokens.url(req, res)),\n\t\tresponseTime(tokens['response-time'](req, res)),\n\t\tlog.bold('- ' + tokens.date(req, res))\n\t].join(' ')\n})\n\nlet cmdValue\n\nprogram\n\t.version('0.1.0')\n\t.description('Minimalist http-server for static site')\n\t.usage('<commands> [options]')\n\t.arguments('<cmd>')\n\t.action((cmd) => {\n\t\tcmdValue = cmd\n\t})\n\nprogram\n\t.command('local')\n\t.description('serve static file locally')\n\t.option('--port <n>', 'port to use')\n\t.option('--spa', 'redirect all route to index.html')\n\t.option('--no-hidden', 'ignore all request to dot files (hidden)')\n\t.action(function (options) {\n\t\tcmdValue = 'local'\n\n\t\tconst OPTS = {\n\t\t\tport: options.port || 8080,\n\t\t\tspa: options.spa || false,\n\t\t\tshowHidden: options.hidden\n\t\t}\n\t\t\n\t\tconst APP_DIR = process.cwd()\n\t\t\n\t\tif(existsSync(path.join(APP_DIR, 'index.html'))) {\n\t\t\tconst app = express()\n\t\t\n\t\t\tapp.use(morganMiddleware)\n\t\t\t// app.use('*', sera(APP_DIR, OPTS))\n\n\t\t\tapp.use('*', async (req, res) => {\n\t\t\t\tconst targetSite = APP_DIR\n\t\t\t\tconst targetPath = req.originalUrl.split('?')[0]\n\t\t\n\t\t\t\tif(existsSync(targetSite)) {\n\t\t\t\t\tconst result = await sera(targetSite, targetPath, {\n\t\t\t\t\t\tspa: options.spa,\n\t\t\t\t\t\tshowHidden: options.hidden\n\t\t\t\t\t})\n\t\t\t\t\tif(result.status === 200) {\n\t\t\t\t\t\tif(!result.type) {\n\t\t\t\t\t\t\tres.type = result.type\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn res.sendFile(result.path, result.options)\n\t\t\t\t\t}\n\t\t\t\t\treturn res.status(result.status).send('error boy')\n\t\t\t\t}\n\t\t\t\treturn res.status(404).send('url not found')\n\t\t\t})\n\t\t\n\t\t\tapp.listen(OPTS.port, () => {\n\t\t\t\tconsole.log(log.bold(`Serph is up on ${log.url(`localhost:${OPTS.port}`)}`))\n\t\t\t})\n\t\t}\n\t\telse{\n\t\t\tconsole.error(log.error('file index.html not found'))\n\t\t}\n\t})\n\nprogram\n\t.command('deploy')\n\t.description('deploy your static site to serph.network')\n\t.action(function () {\n\t\tcmdValue = 'deploy'\n\n\t\tdeploy()\n\t})\n\nprogram\n\t.command('link')\n\t.description('create new link to your deployment')\n\t.arguments('<deployment> <new_link>')\n\t.action(async function (deployment, new_link) {\n\t\tcmdValue = 'link'\n\n\t\tconst authFile = path.join(homedir, '.serph', 'auth.json')\n\t\tif(existsSync(authFile)) {\n\t\t\tconst auth = JSON.parse(readFileSync(authFile))\n\t\t\tif(auth.token) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await atma.requestAccessToken('serph', auth.token)\n\t\t\t\t\tconst accessToken = response.data.data\n\t\t\t\t\tconsole.log(`ᑀ authenticating...`)\n\t\t\t\t\trequest.post({\n\t\t\t\t\t\turl: 'http://localhost:7000/api/links',\n\t\t\t\t\t\tform: {\n\t\t\t\t\t\t\tlink: new_link,\n\t\t\t\t\t\t\ttarget: deployment\n\t\t\t\t\t\t},\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tauthorization: `bearer ${accessToken}`\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (err, httpResponse, body) => {\n\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\tconsole.log(err)\n\t\t\t\t\t\t\treturn process.exit(1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst parseBody = JSON.parse(body)\n\n\t\t\t\t\t\t\tif(parseBody.status === 'error') {\n\t\t\t\t\t\t\t\tconsole.log(`${log.error(`ᑀ deployment ${deployment} is not found!`)}`)\n\t\t\t\t\t\t\t\treturn process.exit(1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(parseBody.status === 'already_used') {\n\t\t\t\t\t\t\t\tconsole.log(`${log.error(`ᑀ link ${new_link} is already used!`)}`)\n\t\t\t\t\t\t\t\treturn process.exit(1)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconsole.log(`ᑀ ${log.bold(new_link)} is now linking to deployment (${log.bold(deployment)})`)\n\t\t\t\t\t\t\tconst data = parseBody.data\n\t\t\t\t\t\t\tconsole.log(`ᑀ online at ${log.url(`https://${data.link}.serph.network`)}`)\n\t\t\t\t\t\t\treturn process.exit(0)\t\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.log(err)\n\t\t\t\t\t\t\tprocess.exit(1)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err.response)\n\t\t\t\t\tif(err.response.data) {\n\t\t\t\t\t\tconsole.log('please login')\n\t\t\t\t\t\tunlinkSync(authFile)\n\t\t\t\t\t}\n\t\t\t\t\tprocess.exit(1)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log('please login using serph login')\n\t\t\t\tprocess.exit(0)\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tconsole.log('please login using serph login')\n\t\t\tprocess.exit(0)\n\t\t}\n\t})\n\t\nprogram\n\t.command('login')\n\t.description('login with evius account')\n\t.action(function () {\n\t\tcmdValue = 'login'\n\t\t\n\t\tlogin()\n\t})\n\nprogram\n\t.command('logout')\n\t.description('logout evius account in this system')\n\t.action(function () {\n\t\tcmdValue = 'login'\n\t\tconst authFile = path.join(homedir, '.serph', 'auth.json')\n\t\tif(existsSync(authFile)) {\n\t\t\tconst auth = JSON.parse(readFileSync(authFile))\n\t\t\tatma.logout(auth.token)\n\t\t\tunlinkSync(authFile)\n\t\t\tconsole.log('Successfully logged out')\n\t\t\tprocess.exit(0)\n\t\t}\n\t\telse{\n\t\t\tconsole.log('Not logged in')\n\t\t\tprocess.exit(0)\n\t\t}\n\t})\n\nprogram.parse(process.argv)\n\nif (typeof cmdValue === 'undefined') {\n\tprogram.help()\n\tprocess.exit(1)\n}"]}