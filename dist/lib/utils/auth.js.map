{"version":3,"sources":["../../../src/lib/utils/auth.js"],"names":["HOME_DIR","isLoggedIn","authFile","path","join","auth","JSON","parse","token","err","requestAccessToken","refreshToken","response","atma","data","login","email","Promise","resolve","reject","confirmPooling","codename","then","Object","assign","stringify","console","log","bold","_err","message","register","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["import path from 'path'\nimport { homedir } from 'os'\nimport { existsSync, readFileSync, unlinkSync, writeFileSync } from 'fs'\n\nimport log from '../log'\n\nimport atma from '@evius/atma-client'\n\nconst HOME_DIR = homedir()\n\nconst isLoggedIn = () => {\n\tconst authFile = path.join(HOME_DIR, '.serph', 'auth.json')\n\tif(existsSync(authFile)) {\n\t\ttry {\n\t\t\tconst auth = JSON.parse(readFileSync(authFile))\n\t\t\tif(auth.token) {\n\t\t\t\treturn auth\n\t\t\t}\t\n\t\t} catch (err) {\n\t\t\tunlinkSync(authFile)\n\t\t\treturn false\n\t\t}\n\t}\n}\n\nconst requestAccessToken = async (refreshToken) => {\n\ttry {\n\t\tconst response = await atma.requestAccessToken('serph', refreshToken)\n\t\treturn [response.data.data, null]\n\t} catch (err) {\n\t\treturn [null, err]\n\t}\n}\n\nconst login = (email) => {\n\treturn new Promise( async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await atma.login(email)\n\t\t\tatma.confirmPooling(email, response.data.data.codename)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tObject.assign(response.data.data, {email: email})\n\t\t\t\t\twriteFileSync(path.join(HOME_DIR, '.serph', 'auth.json'), JSON.stringify(response.data.data))\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\tconsole.log(`> we just sent you verification email with access code: ${log.bold(response.data.data.codename)}`)\n\t\t} catch (err) {\n\t\t\tconst _err = err.response.data\n\t\t\treject(_err.message)\n\t\t}\n\t})\n}\n\nconst register = (email) => {\n\treturn new Promise( async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await atma.register(email)\n\t\t\tatma.confirmPooling(email, response.data.data.codename)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tObject.assign(response.data.data, {email: email})\n\t\t\t\t\twriteFileSync(path.join(HOME_DIR, '.serph', 'auth.json'), JSON.stringify(response.data.data))\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\tconsole.log(`> we just sent you verification email with access code: ${log.bold(response.data.data.codename)}`)\n\t\t} catch (err) {\n\t\t\tconst _err = err.response.data\n\t\t\treject(_err.message)\n\t\t}\n\t})\n}\n\nmodule.exports = {\n\tisLoggedIn,\n\trequestAccessToken,\n\tlogin,\n\tregister\n}"]}