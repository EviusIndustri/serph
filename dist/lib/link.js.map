{"version":3,"sources":["../../src/lib/link.js"],"names":["core","user","deployment","new_link","accessToken","_err","utils","auth","requestAccessToken","token","logger","error","console","log","request","post","url","config","BASE_URL","form","link","target","headers","authorization","err","httpResponse","body","process","exit","parseBody","JSON","parse","status","message","bold","data","isLoggedIn"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,OAAO,OAAOC,IAAP,EAAaC,UAAb,EAAyBC,QAAzB,KAAsC;AAClD,KAAI,CAACC,WAAD,EAAcC,IAAd,IAAsB,MAAMC,gBAAMC,IAAN,CAAWC,kBAAX,CAA8BP,KAAKQ,KAAnC,CAAhC;AACA,KAAGJ,IAAH,EAAS,OAAOC,gBAAMI,MAAN,CAAaC,KAAb,CAAmBN,IAAnB,CAAP;;AAETO,SAAQC,GAAR,CAAa,qBAAb;AACAC,mBAAQC,IAAR,CAAa;AACZC,OAAM,GAAEC,iBAAOC,QAAS,YADZ;AAEZC,QAAM;AACLC,SAAMjB,QADD;AAELkB,WAAQnB;AAFH,GAFM;AAMZoB,WAAS;AACRC,kBAAgB,UAASnB,WAAY;AAD7B;AANG,EAAb,EASG,CAACoB,GAAD,EAAMC,YAAN,EAAoBC,IAApB,KAA6B;AAC/B,MAAGF,GAAH,EAAQ;AACPZ,WAAQC,GAAR,CAAYW,GAAZ;AACA,UAAOG,QAAQC,IAAR,CAAa,CAAb,CAAP;AACA;AACD,MAAI;AACH,SAAMC,YAAYC,KAAKC,KAAL,CAAWL,IAAX,CAAlB;;AAEA,OAAGG,UAAUG,MAAV,KAAqB,OAAxB,EAAiC;AAChCpB,YAAQC,GAAR,CAAa,GAAEA,cAAIF,KAAJ,CAAW,gBAAeT,UAAW,gBAArC,CAAsD,EAArE;AACA,WAAOyB,QAAQC,IAAR,CAAa,CAAb,CAAP;AACA,IAHD,MAIK,IAAGC,UAAUG,MAAV,KAAqB,cAAxB,EAAwC;AAC5CpB,YAAQC,GAAR,CAAa,GAAEA,cAAIF,KAAJ,CAAW,UAASR,QAAS,mBAA7B,CAAiD,EAAhE;AACA,WAAOwB,QAAQC,IAAR,CAAa,CAAb,CAAP;AACA,IAHI,MAIA,IAAGC,UAAUG,MAAV,KAAqB,mBAAxB,EAA6C;AACjDpB,YAAQC,GAAR,CAAa,GAAEA,cAAIF,KAAJ,CAAW,KAAIkB,UAAUI,OAAQ,EAAjC,CAAoC,EAAnD;AACA,WAAON,QAAQC,IAAR,CAAa,CAAb,CAAP;AACA;;AAEDhB,WAAQC,GAAR,CAAa,KAAIA,cAAIqB,IAAJ,CAAS/B,QAAT,CAAmB,kCAAiCU,cAAIqB,IAAJ,CAAShC,UAAT,CAAqB,GAA1F;AACA,SAAMiC,OAAON,UAAUM,IAAvB;AACAvB,WAAQC,GAAR,CAAa,eAAcA,cAAIG,GAAJ,CAAS,WAAUmB,KAAKf,IAAK,gBAA7B,CAA8C,EAAzE;AACA,UAAOO,QAAQC,IAAR,CAAa,CAAb,CAAP;AACA,GApBD,CAoBE,OAAOJ,GAAP,EAAY;AACbZ,WAAQC,GAAR,CAAYW,GAAZ;AACAG,WAAQC,IAAR,CAAa,CAAb;AACA;AACD,EAtCD;AAuCA,CA5CD;;AA8CA,MAAMR,OAAO,OAAOlB,UAAP,EAAmBC,QAAnB,KAAgC;AAC5C,OAAMF,OAAOK,gBAAMC,IAAN,CAAW6B,UAAX,EAAb;AACA,KAAGnC,IAAH,EAAS;AACRD,OAAKC,IAAL,EAAWC,UAAX,EAAuBC,QAAvB;AACA,EAFD,MAGI;AACHS,UAAQC,GAAR,CAAa,wBAAuBA,cAAIqB,IAAJ,CAAU,aAAV,CAAwB,EAA5D;AACAP,UAAQC,IAAR,CAAa,CAAb;AACA;AACD,CATD;;kBAWeR,I","file":"link.js","sourcesContent":["import request from 'request'\nimport utils from './utils'\nimport log from './log'\nimport config from './config'\n\nconst core = async (user, deployment, new_link) => {\n\tlet [accessToken, _err] = await utils.auth.requestAccessToken(user.token)\n\tif(_err) return utils.logger.error(_err)\n\t\n\tconsole.log(`ᑀ authenticating...`)\n\trequest.post({\n\t\turl: `${config.BASE_URL}/api/links`,\n\t\tform: {\n\t\t\tlink: new_link,\n\t\t\ttarget: deployment\n\t\t},\n\t\theaders: {\n\t\t\tauthorization: `bearer ${accessToken}`\n\t\t}\n\t}, (err, httpResponse, body) => {\n\t\tif(err) {\n\t\t\tconsole.log(err)\n\t\t\treturn process.exit(1)\n\t\t}\n\t\ttry {\n\t\t\tconst parseBody = JSON.parse(body)\n\n\t\t\tif(parseBody.status === 'error') {\n\t\t\t\tconsole.log(`${log.error(`ᑀ deployment ${deployment} is not found!`)}`)\n\t\t\t\treturn process.exit(1)\n\t\t\t}\n\t\t\telse if(parseBody.status === 'already_used') {\n\t\t\t\tconsole.log(`${log.error(`ᑀ link ${new_link} is already used!`)}`)\n\t\t\t\treturn process.exit(1)\n\t\t\t}\n\t\t\telse if(parseBody.status === 'invalid_parameter') {\n\t\t\t\tconsole.log(`${log.error(`ᑀ ${parseBody.message}`)}`)\n\t\t\t\treturn process.exit(1)\n\t\t\t}\n\n\t\t\tconsole.log(`ᑀ ${log.bold(new_link)} is now linking to deployment (${log.bold(deployment)})`)\n\t\t\tconst data = parseBody.data\n\t\t\tconsole.log(`ᑀ online at ${log.url(`https://${data.link}.serph.network`)}`)\n\t\t\treturn process.exit(0)\t\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t\tprocess.exit(1)\n\t\t}\n\t})\n}\n\nconst link = async (deployment, new_link) => {\n\tconst user = utils.auth.isLoggedIn()\n\tif(user) {\n\t\tcore(user, deployment, new_link)\n\t}\n\telse{\n\t\tconsole.log(`> please login using ${log.bold(`serph login`)}`)\n\t\tprocess.exit(0)\n\t}\n}\n\nexport default link"]}