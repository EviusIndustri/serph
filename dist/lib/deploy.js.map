{"version":3,"sources":["../../src/lib/deploy.js"],"names":["stripPath","index","targetPath","PATH_SPLIT","split","path","sep","slice","join","fullPath","APP_DIR","baseSplit","baseFinal","length","hashGeneration","files","process","cwd","APP_DIR_SPLIT","APP_INDEX","OWNER_PATH","inputFiles","map","file","content","toPull","source","Promise","resolve","reject","IPLD","inMemory","err","ipld","pull","values","onlyHash","node","size","hash","CID","multihash","toBaseEncodedString","isDir","isDirectory","address","collect","pop","pre","user","siteConfig","accessToken","_err","utils","auth","requestAccessToken","token","logger","error","console","log","ignores","bold","final","request","post","url","config","BASE_URL","form","filesAddress","JSON","stringify","headers","authorization","httpResponse","body","exit","parseBody","parse","data","filesToUpload","deploymentPath","similarName","similarHash","prompt","question","answer","toLowerCase","main","filesToPack","filter","f","buff","tarStream","tar","pack","entries","pipe","zlib","Gzip","totalData","on","push","formatBytes","progressBar","_cliProgress","Bar","format","start","progress","readable","Buffer","concat","update","stop","r","timeout","status","link","target","core","preResult","deploy","isLoggedIn","parseSiteConfig"],"mappings":"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","file":"deploy.js","sourcesContent":["import path from 'path'\nimport { existsSync, readFileSync, statSync, createReadStream } from 'fs'\n\nimport tar from 'tar-fs'\nimport zlib from 'zlib'\nimport _cliProgress from 'cli-progress'\nimport toStream from 'buffer-to-stream'\nimport request from 'request'\nimport recursive from 'recursive-readdir'\n\nimport utils from './utils'\nimport log from './log'\nimport config from './config'\n\nimport {importer} from 'ipfs-unixfs-engine'\nimport IPLD from 'ipld'\nimport pull from 'pull-stream'\nimport CID from 'cids'\nimport toPull from 'stream-to-pull-stream'\n\nconst stripPath = (index, targetPath) => {\n\tconst PATH_SPLIT = targetPath.split(path.sep)\n\treturn `${PATH_SPLIT.slice(index - 1).join(path.sep)}`\n}\n\nconst fullPath = (APP_DIR, targetPath) => {\n\tconst baseSplit = APP_DIR.split('/')\n\tconst baseFinal = baseSplit.slice(0, baseSplit.length - 1).join('/')\n\treturn path.join(baseFinal, targetPath)\n}\n\nconst hashGeneration = (files) => {\n\tconst APP_DIR = process.cwd()\n\tconst APP_DIR_SPLIT = APP_DIR.split(path.sep)\n\tconst APP_INDEX = APP_DIR_SPLIT.length\n\tconst OWNER_PATH = stripPath(APP_INDEX, `${APP_DIR}/owner`)\n\n\tconst inputFiles = files.map((file) => ({\n\t\tpath: stripPath(APP_INDEX, file),\n\t\tcontent: toPull.source(createReadStream(file))\n\t}))\n\n\treturn new Promise((resolve, reject) => {\n\t\tIPLD.inMemory((err, ipld) => {\n\t\t\tpull(\n\t\t\t\tpull.values(inputFiles),\n\t\t\t\timporter(ipld, {\n\t\t\t\t\tonlyHash: true\n\t\t\t\t}),\n\t\t\t\tpull.map((node) => ({\n\t\t\t\t\tpath: stripPath(2, node.path),\n\t\t\t\t\tsize: node.size,\n\t\t\t\t\thash: new CID(0, 'dag-pb', node.multihash).toBaseEncodedString(),\n\t\t\t\t\tisDir: node.path === OWNER_PATH ? false : statSync(fullPath(APP_DIR, node.path)).isDirectory()\n\t\t\t\t})),\n\t\t\t\tpull.map((node) => ({\n\t\t\t\t\tpath: node.path,\n\t\t\t\t\tsize: node.size,\n\t\t\t\t\thash: node.hash,\n\t\t\t\t\tisDir: node.isDir,\n\t\t\t\t\taddress: {\n\t\t\t\t\t\t[`/${node.path}`]: node.hash\n\t\t\t\t\t}\n\t\t\t\t})),\n\t\t\t\tpull.collect((err, files) => {\n\t\t\t\t\tif(err) return reject(err)\n\t\t\t\t\tfiles.pop()\n\t\t\t\t\tresolve(files)\n\t\t\t\t})\n\t\t\t)\n\t\t})\n\t})\n}\n\nconst pre = async (user, siteConfig) => {\n\treturn new Promise(async (resolve) => {\n\t\tlet [accessToken, _err] = await utils.auth.requestAccessToken(user.token)\n\t\tif(_err) return utils.logger.error(_err)\n\n\t\tconst APP_DIR = process.cwd()\n\n\t\tconsole.log('> preparing your files...')\n\n\t\tconst ignores = (siteConfig && siteConfig.ignores) ? siteConfig.ignores : ['']\n\t\n\t\trecursive(APP_DIR, ignores, async (err, files) => {\n\t\t\tconsole.log(`> generating hash address for ${log.bold(files.length)} files...`)\n\t\t\tconst final = await hashGeneration(files)\n\n\t\t\trequest.post({\n\t\t\t\turl: `${config.BASE_URL}/api/deployments/prepare`,\n\t\t\t\tform: {\n\t\t\t\t\tfilesAddress: JSON.stringify(final)\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\tauthorization: `bearer ${accessToken}`\n\t\t\t\t}\n\t\t\t}, (err, httpResponse, body) => {\n\t\t\t\tif(err) {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t\treturn process.exit(1)\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tconst parseBody = JSON.parse(body)\n\n\t\t\t\t\tif(parseBody.data.filesToUpload.length > 0) {\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tdeploymentPath: parseBody.data.deploymentPath,\n\t\t\t\t\t\t\tfilesToUpload: parseBody.data.filesToUpload\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tconsole.log(`> no new files to be deployed`)\n\t\t\t\t\t\tif(parseBody.data.similarName) {\n\t\t\t\t\t\t\tconsole.log(`> similar deployment found at ${log.url(`https://${parseBody.data.similarName}.serph.network`)}`)\n\t\t\t\t\t\t\tconsole.log(`  > Hash: ${log.bold(parseBody.data.similarHash)}`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tutils.prompt.question('> continue deployment? [yes/no] ', async (answer) => {\n\t\t\t\t\t\t\tanswer = answer.toLowerCase()\n\t\t\t\t\t\t\tif(answer === 'y' || answer === 'yes') {\n\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\tdeploymentPath: parseBody.data.deploymentPath,\n\t\t\t\t\t\t\t\t\tfilesToUpload: parseBody.data.filesToUpload\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tprocess.exit(0)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t\tprocess.exit(1)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t})\n}\n\nconst main = async (user, siteConfig, deploymentPath, filesToUpload) => {\n\treturn new Promise(async (resolve) => {\n\t\tconst APP_DIR = process.cwd()\n\n\t\tif(existsSync(path.join(APP_DIR, 'index.html'))) {\n\t\t\tconsole.log(`> packing ${log.bold(filesToUpload.length)} files...`)\n\t\t\tconst filesToPack = filesToUpload.filter((f) => ( f !== 'owner' ))\n\n\t\t\tlet [accessToken, _err] = await utils.auth.requestAccessToken(user.token)\n\t\t\tif(_err) return console.error(_err)\n\n\t\t\tlet buff = []\n\n\t\t\tconst tarStream = tar.pack(APP_DIR, {\n\t\t\t\tentries: filesToPack\n\t\t\t}).pipe(zlib.Gzip())\n\n\t\t\tlet totalData = 0\n\t\t\ttarStream.on('data', (data) => {\n\t\t\t\ttotalData += data.length\n\t\t\t\tbuff.push(data)\n\t\t\t})\n\t\t\ttarStream.on('end', () => {\n\t\t\t\tconsole.log(`> deploying to ${log.bold('serph.network')} [${utils.formatBytes(totalData)}]`)\n\t\t\t\tconst progressBar = new _cliProgress.Bar({\n\t\t\t\t\tformat: '  > upload [{bar}] {percentage}% | ETA: {eta}s'\n\t\t\t\t})\n\t\t\t\tprogressBar.start(100, 0)\n\t\t\t\tlet progress = 0\n\t\t\t\tconst readable = toStream(Buffer.concat(buff))\n\t\t\t\t\n\t\t\t\treadable.on('error', (err) => {\n\t\t\t\t\tthrow err\n\t\t\t\t})\n\t\t\t\treadable.on('data', (data) => {\n\t\t\t\t\tprogress += data.length\n\t\t\t\t\tprogressBar.update(progress*100/totalData)\n\t\t\t\t})\n\t\t\t\treadable.on('end', () => {\n\t\t\t\t\tprogressBar.stop()\n\t\t\t\t\tconsole.log(`> building your deployment...`)\n\t\t\t\t\t// if(filesToPack.length > 1000) {\n\t\t\t\t\t// \tconsole.log(`> processing huge amount of files [${filesToPack.length}]. probably `)\n\t\t\t\t\t// }\n\t\t\t\t})\n\n\t\t\t\tconst r = request.post({\n\t\t\t\t\turl: `${config.BASE_URL}/api/deployments/upload-cli`,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'authorization': `bearer ${accessToken}`,\n\t\t\t\t\t\t'x-serph-deployment': deploymentPath\n\t\t\t\t\t},\n\t\t\t\t\ttimeout: 1000 * 60 * 10\n\t\t\t\t}, async (err, httpResponse, body) => {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\tconsole.log(err)\n\t\t\t\t\t\treturn process.exit(1)\n\t\t\t\t\t}\n\t\t\t\t\tconst parseBody = JSON.parse(body)\n\t\t\t\t\tif(parseBody.status === 'error') {\n\t\t\t\t\t\tconsole.log(log.error('> Something went wrong. Please come back later.'))\n\t\t\t\t\t\tconsole.log(parseBody)\n\t\t\t\t\t\treturn process.exit(1)\n\t\t\t\t\t}\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\n\t\t\t\treadable.pipe(r)\n\t\t\t})\n\t\t}\n\t\telse{\n\t\t\tconsole.error(`${log.error('index.html')} not found`)\n\t\t\tprocess.exit(1)\n\t\t}\n\t})\t\n}\n\nconst post = async (user, siteConfig, deploymentPath) => {\n\tif(siteConfig && siteConfig.link) {\n\t\tconsole.log(`> link was found on ${log.bold(`serph.json`)}`)\n\t\tconsole.log(`> linking ${log.bold(siteConfig.link)} to new deployment (${log.bold(deploymentPath)})`)\n\t\t\n\t\tlet [accessToken, _err] = await utils.auth.requestAccessToken(user.token)\n\t\tif(_err) return console.error(_err)\n\n\t\trequest.post({\n\t\t\turl: `${config.BASE_URL}/api/links`,\n\t\t\tform: {\n\t\t\t\tlink: siteConfig.link,\n\t\t\t\ttarget: deploymentPath\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\tauthorization: `bearer ${accessToken}`\n\t\t\t}\n\t\t}, (err, httpResponse, body) => {\n\t\t\tif(err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\treturn process.exit(1)\n\t\t\t}\n\n\t\t\tconst data = JSON.parse(body).data\n\n\t\t\tconsole.log(`> online at ${log.url(`https://${data.link}.serph.network`)}`)\n\t\t\treturn process.exit(0)\n\n\t\t})\n\t}\n\telse{\n\t\tconsole.log(`> online at ${log.url(`https://${deploymentPath}.serph.network`)}`)\n\t\treturn process.exit(0)\t\t\n\t}\n}\n\nconst core = async (user, siteConfig) => {\n\tconst preResult = await pre(user, siteConfig)\n\tif(preResult) {\n\t\tawait main(user, siteConfig, preResult.deploymentPath, preResult.filesToUpload)\t\n\t\tawait post(user, siteConfig, preResult.deploymentPath)\n\t}\n}\n\nconst deploy = async () => {\n\tconst APP_DIR = process.cwd()\n\n\tif(!existsSync(path.join(APP_DIR, 'index.html'))) {\n\t\tconsole.error(`> ${log.error('index.html not found')}`)\n\t\tprocess.exit(1)\n\t}\n\n\tconsole.log('> authenticating...')\n\n\tconst user = utils.auth.isLoggedIn()\n\tif(user) {\n\t\tif(existsSync(path.join(APP_DIR, 'serph.json'))) {\n\t\t\tconst siteConfig = readFileSync(path.join(APP_DIR, 'serph.json'))\n\t\t\ttry {\n\t\t\t\tconst parseSiteConfig = JSON.parse(siteConfig)\n\t\t\t\tcore(user, parseSiteConfig)\n\t\t\t}\n\t\t\tcatch(err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\tprocess.exit(1)\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tcore(user)\n\t\t}\n\t}\n\telse{\n\t\tconsole.log(`> please login using ${log.bold(`serph login`)}`)\n\t\tprocess.exit(0)\n\t}\n}\n\nexport default deploy"]}